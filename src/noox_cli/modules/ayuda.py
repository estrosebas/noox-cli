"""
M√≥dulo de Ayuda - NooxCLI
Migrado desde ayuda.bat con interfaz interactiva mejorada
"""

from typing import List, Dict, Any
from ..menu import NooxMenu
from rich.panel import Panel
from rich.text import Text
from rich.columns import Columns
from rich import box


class AyudaModule:
    """M√≥dulo de ayuda interactivo."""
    
    def __init__(self):
        self.menu = NooxMenu("Ayuda - NooxCLI")
    
    def main(self):
        """Funci√≥n principal del m√≥dulo de ayuda."""
        while True:
            self.menu.show_banner()
            
            # Men√∫ principal de ayuda
            choices = [
                {
                    'name': 'üìö Comandos Disponibles',
                    'value': 'comandos',
                    'description': 'Lista de todos los comandos disponibles'
                },
                {
                    'name': 'üõ†Ô∏è Funciones de Desarrollo',
                    'value': 'desarrollo',
                    'description': 'Herramientas y utilidades de desarrollo'
                },
                {
                    'name': '‚öôÔ∏è Funciones de Sistema',
                    'value': 'sistema',
                    'description': 'Administraci√≥n y monitoreo del sistema'
                },
                {
                    'name': 'üìÅ Funciones de Proyectos',
                    'value': 'proyectos',
                    'description': 'Gesti√≥n y creaci√≥n de proyectos'
                },
                {
                    'name': 'üîß Funciones de Configuraci√≥n',
                    'value': 'configuracion',
                    'description': 'Configuraci√≥n de consola y UTF-8'
                },
                {
                    'name': 'üîç Buscar Ayuda',
                    'value': 'buscar',
                    'description': 'Buscar ayuda espec√≠fica'
                }
            ]
            
            selection = self.menu.show_menu(choices, "üìñ ¬øSobre qu√© necesitas ayuda?")
            
            if not selection or selection == 'exit':
                break
            
            self._handle_selection(selection)
    
    def _handle_selection(self, selection: str):
        """Maneja la selecci√≥n del usuario."""
        handlers = {
            'comandos': self._show_comandos,
            'desarrollo': self._show_desarrollo,
            'sistema': self._show_sistema,
            'proyectos': self._show_proyectos,
            'configuracion': self._show_configuracion,
            'buscar': self._buscar_ayuda
        }
        
        if selection in handlers:
            handlers[selection]()
            self.menu.pause()
    
    def _show_comandos(self):
        """Muestra todos los comandos disponibles."""
        self.menu.clear_screen()
        
        comandos_data = [
            ("desarrollo", "Herramientas de desarrollo"),
            ("sistema", "Administraci√≥n del sistema"),
            ("proyectos", "Gesti√≥n de proyectos"),
            ("config", "Configuraci√≥n UTF-8/Consola"),
            ("test-utf8", "Prueba de caracteres especiales"),
            ("ayuda", "Sistema de ayuda interactivo"),
            ("reparar", "Utilidades de reparaci√≥n")
        ]
        
        # Crear tabla de comandos
        comandos_text = Text()
        comandos_text.append("COMANDO", style="bold cyan")
        comandos_text.append("          ", style="white")
        comandos_text.append("DESCRIPCI√ìN", style="bold cyan")
        comandos_text.append("\\n")
        comandos_text.append("‚îÄ" * 50, style="white")
        comandos_text.append("\\n")
        
        for comando, descripcion in comandos_data:
            comandos_text.append(f"{comando:<15}", style="yellow")
            comandos_text.append(f" {descripcion}", style="white")
            comandos_text.append("\\n")
        
        panel = Panel(
            comandos_text,
            title="üìö Comandos Disponibles",
            border_style="green",
            box=box.DOUBLE
        )
        
        self.menu.console.print(panel)
        
        self.menu.show_info("üí° Tip: Todos estos comandos ahora tienen men√∫s interactivos")
        self.menu.show_info("üìù Nota: Los scripts originales est√°n en tu carpeta Scripts")
    
    def _show_desarrollo(self):
        """Muestra ayuda sobre funciones de desarrollo."""
        self.menu.clear_screen()
        
        funciones = [
            "üîß Abrir VS Code en directorio actual",
            "üì¶ Git (init, status, add, commit, push)",
            "üìö NPM/Yarn (install, update, cache clean)",
            "üêç Python (crear estructura, servidor desarrollo)",
            "üíª PowerShell (scripts y utilidades)",
            "üîç Diagn√≥stico de entorno de desarrollo",
            "üöÄ Herramientas de productividad"
        ]
        
        funciones_text = Text()
        for funcion in funciones:
            funciones_text.append(f"‚Ä¢ {funcion}", style="white")
            funciones_text.append("\\n")
        
        panel = Panel(
            funciones_text,
            title="üõ†Ô∏è Funciones de Desarrollo",
            border_style="blue",
            box=box.ROUNDED
        )
        
        self.menu.console.print(panel)
        self.menu.show_info("üí° Accede a estas funciones usando el m√≥dulo 'Desarrollo'")
    
    def _show_sistema(self):
        """Muestra ayuda sobre funciones de sistema."""
        self.menu.clear_screen()
        
        funciones = [
            "üìä Informaci√≥n del sistema y procesos",
            "üåê Red (IP, ping, DNS flush, conexiones)",
            "üíæ Espacio en disco y uso de memoria",
            "üßπ Limpieza de archivos temporales",
            "‚ö° Administrador de tareas avanzado",
            "üîí Servicios de Windows",
            "üìà Monitoreo de rendimiento",
            "üîß Utilidades de diagn√≥stico"
        ]
        
        funciones_text = Text()
        for funcion in funciones:
            funciones_text.append(f"‚Ä¢ {funcion}", style="white")
            funciones_text.append("\\n")
        
        panel = Panel(
            funciones_text,
            title="‚öôÔ∏è Funciones de Sistema",
            border_style="red",
            box=box.ROUNDED
        )
        
        self.menu.console.print(panel)
        self.menu.show_info("üí° Accede a estas funciones usando el m√≥dulo 'Sistema'")
    
    def _show_proyectos(self):
        """Muestra ayuda sobre funciones de proyectos."""
        self.menu.clear_screen()
        
        funciones = [
            "üÜï Crear proyectos (Web, Python, Node.js, React)",
            "üì• Clonar repositorios de GitHub/GitLab", 
            "üì¶ Backup y compresi√≥n de proyectos",
            "üöÄ Deploy y testing automatizado",
            "üê≥ Operaciones con Docker",
            "üîÑ Gesti√≥n de dependencias",
            "üìã Templates de proyectos",
            "üóÇÔ∏è Organizaci√≥n de workspace"
        ]
        
        funciones_text = Text()
        for funcion in funciones:
            funciones_text.append(f"‚Ä¢ {funcion}", style="white")
            funciones_text.append("\\n")
        
        panel = Panel(
            funciones_text,
            title="üìÅ Funciones de Proyectos",
            border_style="magenta",
            box=box.ROUNDED
        )
        
        self.menu.console.print(panel)
        self.menu.show_info("üí° Accede a estas funciones usando el m√≥dulo 'Proyectos'")
    
    def _show_configuracion(self):
        """Muestra ayuda sobre funciones de configuraci√≥n."""
        self.menu.clear_screen()
        
        funciones = [
            "üåê Configurar UTF-8 y codificaci√≥n de caracteres",
            "üé® Cambiar fuentes y colores de consola",
            "üß™ Probar caracteres especiales y emojis",
            "üîç Diagn√≥stico de problemas de codificaci√≥n",
            "‚öôÔ∏è Configuraci√≥n de PowerShell profile",
            "üéØ Personalizaci√≥n de prompt",
            "üìù Variables de entorno",
            "üîß Herramientas de diagn√≥stico"
        ]
        
        funciones_text = Text()
        for funcion in funciones:
            funciones_text.append(f"‚Ä¢ {funcion}", style="white")
            funciones_text.append("\\n")
        
        panel = Panel(
            funciones_text,
            title="üîß Funciones de Configuraci√≥n",
            border_style="cyan",
            box=box.ROUNDED
        )
        
        self.menu.console.print(panel)
        self.menu.show_info("üí° Accede a estas funciones usando el m√≥dulo 'Configuraci√≥n'")
    
    def _buscar_ayuda(self):
        """Permite buscar ayuda espec√≠fica."""
        self.menu.clear_screen()
        
        termino = self.menu.show_input("üîç Ingresa el t√©rmino a buscar:")
        
        if not termino:
            return
        
        # Simulamos una b√∫squeda simple
        termino_lower = termino.lower()
        resultados = []
        
        # Base de conocimiento simple
        conocimiento = {
            "git": "Herramientas Git est√°n en el m√≥dulo Desarrollo",
            "npm": "Comandos NPM est√°n en el m√≥dulo Desarrollo", 
            "python": "Utilidades Python est√°n en el m√≥dulo Desarrollo",
            "sistema": "Informaci√≥n del sistema est√° en el m√≥dulo Sistema",
            "red": "Herramientas de red est√°n en el m√≥dulo Sistema",
            "proyectos": "Gesti√≥n de proyectos est√° en el m√≥dulo Proyectos",
            "utf8": "Configuraci√≥n UTF-8 est√° en el m√≥dulo Configuraci√≥n",
            "codificacion": "Problemas de codificaci√≥n est√°n en el m√≥dulo Configuraci√≥n",
            "docker": "Operaciones Docker est√°n en el m√≥dulo Proyectos"
        }
        
        for palabra, ayuda in conocimiento.items():
            if palabra in termino_lower:
                resultados.append(f"‚Ä¢ {ayuda}")
        
        if resultados:
            self.menu.show_success(f"Resultados para '{termino}':")
            for resultado in resultados:
                self.menu.console.print(f"  {resultado}")
        else:
            self.menu.show_warning(f"No se encontraron resultados para '{termino}'")
            self.menu.show_info("üí° Intenta con t√©rminos como: git, npm, python, sistema, red, etc.")


def main():
    """Funci√≥n principal del m√≥dulo."""
    ayuda_module = AyudaModule()
    ayuda_module.main()


if __name__ == "__main__":
    main()
