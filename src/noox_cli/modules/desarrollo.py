"""
M√≥dulo de Desarrollo - NooxCLI
Migrado desde desarrollo.bat con interfaz interactiva mejorada
Herramientas para desarrollo: Git, NPM, Python, VS Code, etc.
"""

import os
import sys
import subprocess
import webbrowser
from pathlib import Path
from typing import List, Dict, Any, Optional
from ..menu import NooxMenu
from rich.panel import Panel
from rich.text import Text
from rich.table import Table
from rich import box


class DesarrolloModule:
    """M√≥dulo de herramientas de desarrollo."""
    
    def __init__(self):
        self.menu = NooxMenu("Desarrollo - NooxCLI")
        self.current_dir = Path.cwd()
        
    def main(self):
        """Funci√≥n principal del m√≥dulo de desarrollo."""
        while True:
            self.menu.show_banner()
            
            # Mostrar directorio actual
            self.menu.show_info(f"üìÅ Directorio actual: {self.current_dir}")
            self.menu.console.print()
            
            # Men√∫ principal de desarrollo
            choices = [
                {
                    'name': 'üíª Abrir VS Code',
                    'value': 'vscode',
                    'description': 'Abrir VS Code en directorio actual'
                },
                {
                    'name': 'üîÑ Git - Inicializar proyecto',
                    'value': 'git_init',
                    'description': 'Inicializar repositorio Git'
                },
                {
                    'name': 'üì¶ Node.js - Instalar dependencias',
                    'value': 'npm_install',
                    'description': 'npm/yarn install'
                },
                {
                    'name': 'üêç Python - Crear estructura',
                    'value': 'python_struct',
                    'description': 'Crear estructura de proyecto Python'
                },
                {
                    'name': 'üåê Servidor local',
                    'value': 'local_server',
                    'description': 'Lanzar servidor de desarrollo'
                },
                {
                    'name': '‚ö° PowerShell aqu√≠',
                    'value': 'powershell',
                    'description': 'Abrir PowerShell en directorio'
                },
                {
                    'name': 'üìä Git - Estado',
                    'value': 'git_status',
                    'description': 'Ver estado y commits recientes'
                },
                {
                    'name': 'üöÄ Git - Push r√°pido',
                    'value': 'git_push',
                    'description': 'Add, commit y push'
                },
                {
                    'name': 'üßπ Limpiar cache',
                    'value': 'clean_cache',
                    'description': 'Limpiar cache npm/yarn/pip'
                },
                {
                    'name': 'üîß Herramientas adicionales',
                    'value': 'extra_tools',
                    'description': 'M√°s herramientas de desarrollo'
                }
            ]
            
            selection = self.menu.show_menu(choices, "üõ†Ô∏è ¬øQu√© herramienta necesitas?")
            
            if not selection or selection == 'exit':
                break
            
            self._handle_selection(selection)
    
    def _handle_selection(self, selection: str):
        """Maneja la selecci√≥n del usuario."""
        handlers = {
            'vscode': self._open_vscode,
            'git_init': self._git_init,
            'npm_install': self._npm_install,
            'python_struct': self._create_python_structure,
            'local_server': self._local_server,
            'powershell': self._open_powershell,
            'git_status': self._git_status,
            'git_push': self._git_push,
            'clean_cache': self._clean_cache,
            'extra_tools': self._extra_tools
        }
        
        if selection in handlers:
            try:
                handlers[selection]()
            except Exception as e:
                self.menu.show_error(f"Error ejecutando {selection}: {e}")
            self.menu.pause()
    
    def _open_vscode(self):
        """Abre VS Code en el directorio actual."""
        self.menu.clear_screen()
        
        if self._open_vscode_improved():
            self.menu.show_success("‚úÖ VS Code abierto correctamente")
        else:
            self.menu.show_error("‚ùå VS Code no est√° instalado o no se pudo abrir")
            self.menu.show_info("üí° Instala VS Code desde: https://code.visualstudio.com/")
    
    def _open_vscode_improved(self) -> bool:
        """Abre VS Code con mejor detecci√≥n de rutas."""
        # Lista de comandos a probar en orden de preferencia
        vscode_commands = [
            'code.cmd',  # Comando que funciona en tu sistema
            'code',      # Comando directo
            rf"C:\Users\{os.environ.get('USERNAME', '')}\AppData\Local\Programs\Microsoft VS Code\bin\code.cmd",
            rf"C:\Users\{os.environ.get('USERNAME', '')}\AppData\Local\Programs\Microsoft VS Code\Code.exe",
            r"C:\Program Files\Microsoft VS Code\bin\code.cmd",
            r"C:\Program Files\Microsoft VS Code\Code.exe",
            r"C:\Program Files (x86)\Microsoft VS Code\bin\code.cmd",
            r"C:\Program Files (x86)\Microsoft VS Code\Code.exe"
        ]
        
        for vscode_cmd in vscode_commands:
            try:
                # Si es solo 'code' o 'code.cmd', intentar como comando
                if vscode_cmd in ['code', 'code.cmd']:
                    subprocess.run([vscode_cmd, '.'], check=True, timeout=10)
                    return True
                
                # Para rutas espec√≠ficas, verificar que exista primero
                if os.path.exists(vscode_cmd):
                    subprocess.Popen([vscode_cmd, '.'])
                    return True
                    
            except (subprocess.CalledProcessError, FileNotFoundError, subprocess.TimeoutExpired):
                continue
            except Exception:
                continue
        
        return False
    
    def _git_init(self):
        """Inicializa un repositorio Git."""
        self.menu.clear_screen()
        
        # Verificar si ya existe un repositorio
        if (self.current_dir / '.git').exists():
            self.menu.show_warning("‚ö†Ô∏è Ya existe un repositorio Git en este directorio")
            return
        
        if not self._command_exists('git'):
            self.menu.show_error("‚ùå Git no est√° instalado")
            return
        
        try:
            self.menu.show_info("üîÑ Inicializando repositorio Git...")
            
            # git init
            subprocess.run(['git', 'init'], check=True, capture_output=True)
            self.menu.show_success("‚úÖ Repositorio inicializado")
            
            # git add .
            subprocess.run(['git', 'add', '.'], check=True, capture_output=True)
            self.menu.show_success("‚úÖ Archivos agregados al staging")
            
            # git commit
            subprocess.run(['git', 'commit', '-m', 'Initial commit'], check=True, capture_output=True)
            self.menu.show_success("‚úÖ Commit inicial creado")
            
            self.menu.show_info("üéâ Repositorio Git configurado exitosamente!")
            
        except subprocess.CalledProcessError as e:
            self.menu.show_error(f"Error configurando Git: {e}")
    
    def _npm_install(self):
        """Instala dependencias de Node.js."""
        self.menu.clear_screen()
        
        # Verificar si existe package.json
        if not (self.current_dir / 'package.json').exists():
            self.menu.show_warning("‚ö†Ô∏è No se encontr√≥ package.json en este directorio")
            
            if self.menu.show_confirmation("¬øQuieres inicializar un proyecto Node.js?"):
                try:
                    subprocess.run(['npm', 'init', '-y'], check=True)
                    self.menu.show_success("‚úÖ package.json creado")
                except subprocess.CalledProcessError:
                    self.menu.show_error("‚ùå Error inicializando proyecto Node.js")
                    return
            else:
                return
        
        # Seleccionar gestor de paquetes
        package_managers = [
            {'name': 'üì¶ npm install', 'value': 'npm'},
            {'name': 'üß∂ yarn install', 'value': 'yarn'},
            {'name': '‚ö° pnpm install', 'value': 'pnpm'}
        ]
        
        selection = self.menu.show_menu(package_managers, "üì¶ Selecciona gestor de paquetes:")
        
        if not selection or selection == 'exit':
            return
        
        try:
            if selection == 'npm' and self._command_exists('npm'):
                self.menu.show_info("üì¶ Ejecutando npm install...")
                subprocess.run(['npm', 'install'], check=True)
                self.menu.show_success("‚úÖ Dependencias instaladas con npm")
                
            elif selection == 'yarn' and self._command_exists('yarn'):
                self.menu.show_info("üß∂ Ejecutando yarn install...")
                subprocess.run(['yarn', 'install'], check=True)
                self.menu.show_success("‚úÖ Dependencias instaladas con yarn")
                
            elif selection == 'pnpm' and self._command_exists('pnpm'):
                self.menu.show_info("‚ö° Ejecutando pnpm install...")
                subprocess.run(['pnpm', 'install'], check=True)
                self.menu.show_success("‚úÖ Dependencias instaladas con pnpm")
                
            else:
                self.menu.show_error(f"‚ùå {selection} no est√° instalado")
                
        except subprocess.CalledProcessError as e:
            self.menu.show_error(f"Error instalando dependencias: {e}")
    
    def _create_python_structure(self):
        """Crea estructura b√°sica de proyecto Python."""
        self.menu.clear_screen()
        
        try:
            # Crear directorios
            directories = ['src', 'tests', 'docs']
            for directory in directories:
                (self.current_dir / directory).mkdir(exist_ok=True)
            
            # Crear archivos b√°sicos
            files = {
                'README.md': '# Proyecto Python\n\nDescripci√≥n del proyecto.\n',
                'requirements.txt': '# Dependencias del proyecto\n',
                'main.py': 'from src import main\n\nif __name__ == "__main__":\n    main()\n',
                'src/__init__.py': '',
                'src/main.py': 'def main():\n    print("¬°Hola, mundo!")\n',
                'tests/__init__.py': '',
                'tests/test_main.py': 'import unittest\nfrom src.main import main\n\nclass TestMain(unittest.TestCase):\n    def test_main(self):\n        # Agregar tests aqu√≠\n        pass\n'
            }
            
            for file_path, content in files.items():
                file_full_path = self.current_dir / file_path
                file_full_path.parent.mkdir(parents=True, exist_ok=True)
                file_full_path.write_text(content, encoding='utf-8')
            
            self.menu.show_success("‚úÖ Estructura de proyecto Python creada")
            self.menu.show_info("üìÅ Directorios creados: src/, tests/, docs/")
            self.menu.show_info("üìÑ Archivos creados: README.md, requirements.txt, main.py, etc.")
            
        except Exception as e:
            self.menu.show_error(f"Error creando estructura Python: {e}")
    
    def _local_server(self):
        """Lanza servidor local de desarrollo."""
        self.menu.clear_screen()
        
        servers = [
            {'name': 'üêç Python HTTP Server (puerto 8000)', 'value': 'python'},
            {'name': 'üì¶ Node.js Express (crear proyecto)', 'value': 'node'},
            {'name': '‚öõÔ∏è React Development Server', 'value': 'react'},
            {'name': 'üåê Servidor PHP (si disponible)', 'value': 'php'}
        ]
        
        selection = self.menu.show_menu(servers, "üåê Selecciona tipo de servidor:")
        
        if not selection or selection == 'exit':
            return
        
        try:
            if selection == 'python':
                self.menu.show_info("üêç Iniciando servidor Python en puerto 8000...")
                self.menu.show_info("üåê Accede a: http://localhost:8000")
                self.menu.show_warning("‚ö†Ô∏è Presiona Ctrl+C para detener el servidor")
                subprocess.run([sys.executable, '-m', 'http.server', '8000'])
                
            elif selection == 'node':
                if self._command_exists('npx'):
                    self.menu.show_info("üì¶ Creando proyecto React con TypeScript...")
                    subprocess.run(['npx', 'create-react-app', '.', '--template', 'typescript'], check=True)
                    self.menu.show_success("‚úÖ Proyecto React creado")
                else:
                    self.menu.show_error("‚ùå npx no est√° disponible")
                    
            elif selection == 'react':
                if (self.current_dir / 'package.json').exists():
                    self.menu.show_info("‚öõÔ∏è Iniciando servidor de desarrollo React...")
                    subprocess.run(['npm', 'start'])
                else:
                    self.menu.show_error("‚ùå No se encontr√≥ un proyecto React v√°lido")
                    
            elif selection == 'php':
                if self._command_exists('php'):
                    self.menu.show_info("üåê Iniciando servidor PHP en puerto 8080...")
                    self.menu.show_info("üåê Accede a: http://localhost:8080")
                    subprocess.run(['php', '-S', 'localhost:8080'])
                else:
                    self.menu.show_error("‚ùå PHP no est√° instalado")
                    
        except subprocess.CalledProcessError as e:
            self.menu.show_error(f"Error iniciando servidor: {e}")
        except KeyboardInterrupt:
            self.menu.show_info("\nüõë Servidor detenido")
    
    def _open_powershell(self):
        """Abre PowerShell en el directorio actual con opciones mejoradas."""
        self.menu.clear_screen()
        
        # Verificar si Windows Terminal est√° disponible
        wt_available = self._command_exists('wt')
        
        # Ofrecer opciones de terminal
        terminal_options = [
            {'name': 'üñ•Ô∏è Terminal normal', 'value': 'normal'},
            {'name': 'üßπ Terminal limpio (sin perfil)', 'value': 'clean'},
            {'name': 'üì¶ CMD tradicional', 'value': 'cmd'}
        ]
        
        # Agregar opci√≥n de Windows Terminal si no est√° disponible
        if not wt_available:
            terminal_options.append({
                'name': 'üí° Instalar Windows Terminal', 
                'value': 'install_wt',
                'description': 'Mejor experiencia con iconos y colores'
            })
        
        terminal_choice = self.menu.show_menu(terminal_options, "üñ•Ô∏è Tipo de terminal:")
        
        if not terminal_choice or terminal_choice == 'exit':
            return
        
        try:
            if terminal_choice == 'install_wt':
                self._install_windows_terminal()
            elif terminal_choice == 'clean':
                success = self._open_clean_terminal()
            elif terminal_choice == 'cmd':
                success = self._open_cmd_terminal()
            else:
                success = self._open_terminal()
                
            if terminal_choice != 'install_wt':
                if success:
                    self.menu.show_success("‚úÖ Terminal abierto en directorio actual")
                else:
                    self.menu.show_error("‚ùå No se pudo abrir el terminal")
                
        except Exception as e:
            self.menu.show_error(f"Error abriendo terminal: {e}")
    
    def _open_terminal(self) -> bool:
        """Abre terminal normal en el directorio actual."""
        try:
            if os.name == 'nt':
                # Intentar Windows Terminal primero - abrir en la app existente
                if self._command_exists('wt'):
                    try:
                        # Si ya estamos en Windows Terminal, abrir nueva pesta√±a
                        if os.environ.get('WT_SESSION'):
                            subprocess.run([
                                'wt', 'new-tab', '--startingDirectory', str(self.current_dir)
                            ])
                        else:
                            # Si no estamos en WT, abrir nueva ventana
                            subprocess.run([
                                'wt', '-d', str(self.current_dir)
                            ])
                        return True
                    except FileNotFoundError:
                        pass
                
                # Intentar PowerShell 7 con configuraci√≥n limpia
                try:
                    subprocess.Popen([
                        'pwsh', '-NoExit', '-NoLogo', '-Command', 
                        f"Set-Location '{self.current_dir}'"
                    ], creationflags=subprocess.CREATE_NEW_CONSOLE)
                    return True
                except FileNotFoundError:
                    pass
                
                # Fallback a PowerShell 5.1 con configuraci√≥n limpia
                try:
                    subprocess.Popen([
                        'powershell', '-NoExit', '-NoLogo', '-Command', 
                        f"Set-Location '{self.current_dir}'"
                    ], creationflags=subprocess.CREATE_NEW_CONSOLE)
                    return True
                except Exception:
                    pass
                
                # √öltimo recurso: CMD
                try:
                    subprocess.Popen([
                        'cmd', '/k', f'cd /d "{self.current_dir}" && title Desarrollo: {self.current_dir.name}'
                    ], creationflags=subprocess.CREATE_NEW_CONSOLE)
                    return True
                except Exception:
                    pass
                    
            else:  # Linux/macOS
                terminals = ['gnome-terminal', 'xterm', 'konsole']
                for terminal in terminals:
                    try:
                        subprocess.Popen([terminal, '--working-directory', str(self.current_dir)])
                        return True
                    except FileNotFoundError:
                        continue
            
            return False
            
        except Exception:
            return False
    
    def _open_clean_terminal(self) -> bool:
        """Abre terminal sin cargar perfil para evitar conflictos."""
        try:
            if os.name == 'nt':
                # Intentar Windows Terminal con PowerShell sin perfil
                if self._command_exists('wt'):
                    try:
                        if os.environ.get('WT_SESSION'):
                            # Nueva pesta√±a en Windows Terminal existente
                            subprocess.run([
                                'wt', 'new-tab', '--startingDirectory', str(self.current_dir),
                                'pwsh', '-NoProfile', '-NoLogo', '-Command',
                                f"Set-Location '{self.current_dir}'; Write-Host 'Terminal limpio - Desarrollo: {self.current_dir.name}' -ForegroundColor Cyan"
                            ])
                        else:
                            # Nueva ventana de Windows Terminal
                            subprocess.run([
                                'wt', '-d', str(self.current_dir),
                                'pwsh', '-NoProfile', '-NoLogo', '-Command',
                                f"Set-Location '{self.current_dir}'; Write-Host 'Terminal limpio - Desarrollo: {self.current_dir.name}' -ForegroundColor Cyan"
                            ])
                        return True
                    except FileNotFoundError:
                        pass
                
                # Fallback: PowerShell 7 sin perfil en ventana separada
                try:
                    subprocess.Popen([
                        'pwsh', '-NoProfile', '-NoExit', '-NoLogo', '-Command', 
                        f"Set-Location '{self.current_dir}'; Write-Host 'Terminal limpio - Desarrollo: {self.current_dir.name}' -ForegroundColor Cyan"
                    ], creationflags=subprocess.CREATE_NEW_CONSOLE)
                    return True
                except FileNotFoundError:
                    pass
                
                # Fallback a PowerShell 5.1 sin perfil
                try:
                    subprocess.Popen([
                        'powershell', '-NoProfile', '-NoExit', '-NoLogo', '-Command', 
                        f"Set-Location '{self.current_dir}'; Write-Host 'Terminal limpio - Desarrollo: {self.current_dir.name}' -ForegroundColor Cyan"
                    ], creationflags=subprocess.CREATE_NEW_CONSOLE)
                    return True
                except Exception:
                    return False
            
            return False
            
        except Exception:
            return False
    
    def _open_cmd_terminal(self) -> bool:
        """Abre CMD tradicional (m√°s estable)."""
        try:
            if os.name == 'nt':
                # Intentar Windows Terminal con CMD
                if self._command_exists('wt'):
                    try:
                        if os.environ.get('WT_SESSION'):
                            # Nueva pesta√±a CMD en Windows Terminal existente
                            subprocess.run([
                                'wt', 'new-tab', '--startingDirectory', str(self.current_dir),
                                'cmd', '/k', f'title Desarrollo: {self.current_dir.name} && echo Directorio de desarrollo: {self.current_dir}'
                            ])
                        else:
                            # Nueva ventana de Windows Terminal con CMD
                            subprocess.run([
                                'wt', '-d', str(self.current_dir),
                                'cmd', '/k', f'title Desarrollo: {self.current_dir.name} && echo Directorio de desarrollo: {self.current_dir}'
                            ])
                        return True
                    except FileNotFoundError:
                        pass
                
                # Fallback: CMD en ventana separada
                subprocess.Popen([
                    'cmd', '/k', 
                    f'cd /d "{self.current_dir}" && title Desarrollo: {self.current_dir.name} && echo Directorio de desarrollo: {self.current_dir}'
                ], creationflags=subprocess.CREATE_NEW_CONSOLE)
                return True
            
            return False
            
        except Exception:
            return False
    
    def _git_status(self):
        """Muestra estado de Git y commits recientes."""
        self.menu.clear_screen()
        
        if not (self.current_dir / '.git').exists():
            self.menu.show_error("‚ùå No es un repositorio Git")
            return
        
        if not self._command_exists('git'):
            self.menu.show_error("‚ùå Git no est√° instalado")
            return
        
        try:
            # Git status
            self.menu.console.print("[bold cyan]üìä Estado del repositorio:[/bold cyan]")
            result = subprocess.run(['git', 'status', '--porcelain'], 
                                  capture_output=True, text=True, check=True)
            
            if result.stdout.strip():
                status_lines = result.stdout.strip().split('\n')
                table = Table(title="üìÅ Archivos modificados", box=box.SIMPLE)
                table.add_column("Estado", style="yellow", width=8)
                table.add_column("Archivo", style="white")
                
                for line in status_lines:
                    if len(line) >= 3:
                        status = line[:2]
                        file_name = line[3:]
                        status_desc = self._get_git_status_description(status)
                        table.add_row(status_desc, file_name)
                
                self.menu.console.print(table)
            else:
                self.menu.show_success("‚úÖ No hay cambios pendientes")
            
            # Commits recientes
            self.menu.console.print("\n[bold cyan]üìù Commits recientes:[/bold cyan]")
            result = subprocess.run(['git', 'log', '--oneline', '-5'], 
                                  capture_output=True, text=True, check=True)
            
            if result.stdout.strip():
                commits = result.stdout.strip().split('\n')
                for i, commit in enumerate(commits, 1):
                    self.menu.console.print(f"  {i}. {commit}")
            else:
                self.menu.show_info("‚ÑπÔ∏è No hay commits en el repositorio")
                
        except subprocess.CalledProcessError as e:
            self.menu.show_error(f"Error consultando Git: {e}")
    
    def _git_push(self):
        """Realiza add, commit y push r√°pido."""
        self.menu.clear_screen()
        
        if not (self.current_dir / '.git').exists():
            self.menu.show_error("‚ùå No es un repositorio Git")
            return
        
        if not self._command_exists('git'):
            self.menu.show_error("‚ùå Git no est√° instalado")
            return
        
        # Solicitar mensaje de commit
        commit_message = self.menu.show_input("üí¨ Mensaje del commit:", "Update files")
        
        if not commit_message:
            self.menu.show_warning("‚ö†Ô∏è Commit cancelado")
            return
        
        try:
            # git add .
            self.menu.show_info("üì¶ Agregando archivos...")
            subprocess.run(['git', 'add', '.'], check=True, capture_output=True)
            
            # git commit
            self.menu.show_info("üíæ Creando commit...")
            subprocess.run(['git', 'commit', '-m', commit_message], check=True, capture_output=True)
            
            # git push
            self.menu.show_info("üöÄ Haciendo push...")
            result = subprocess.run(['git', 'push'], check=True, capture_output=True, text=True)
            
            self.menu.show_success("‚úÖ Push completado exitosamente!")
            
        except subprocess.CalledProcessError as e:
            if "no changes added to commit" in str(e):
                self.menu.show_warning("‚ö†Ô∏è No hay cambios para commitear")
            elif "no upstream branch" in str(e):
                self.menu.show_warning("‚ö†Ô∏è No hay rama upstream configurada")
                if self.menu.show_confirmation("¬øConfigurar upstream autom√°ticamente?"):
                    try:
                        subprocess.run(['git', 'push', '-u', 'origin', 'main'], check=True)
                        self.menu.show_success("‚úÖ Push con upstream configurado!")
                    except subprocess.CalledProcessError:
                        self.menu.show_error("‚ùå Error configurando upstream")
            else:
                self.menu.show_error(f"Error en Git: {e}")
    
    def _clean_cache(self):
        """Limpia cache de diferentes herramientas."""
        self.menu.clear_screen()
        
        cache_options = [
            {'name': 'üì¶ npm cache', 'value': 'npm'},
            {'name': 'üß∂ yarn cache', 'value': 'yarn'},
            {'name': 'üêç pip cache', 'value': 'pip'},
            {'name': '‚ö° pnpm cache', 'value': 'pnpm'},
            {'name': 'üßπ Limpiar todo', 'value': 'all'}
        ]
        
        selection = self.menu.show_menu(cache_options, "üßπ ¬øQu√© cache quieres limpiar?")
        
        if not selection or selection == 'exit':
            return
        
        try:
            cleaned = []
            
            if selection in ['npm', 'all'] and self._command_exists('npm'):
                self.menu.show_info("üßπ Limpiando cache npm...")
                subprocess.run(['npm', 'cache', 'clean', '--force'], 
                             check=True, capture_output=True)
                cleaned.append('npm')
            
            if selection in ['yarn', 'all'] and self._command_exists('yarn'):
                self.menu.show_info("üßπ Limpiando cache yarn...")
                subprocess.run(['yarn', 'cache', 'clean'], 
                             check=True, capture_output=True)
                cleaned.append('yarn')
            
            if selection in ['pip', 'all'] and self._command_exists('pip'):
                self.menu.show_info("üßπ Limpiando cache pip...")
                subprocess.run([sys.executable, '-m', 'pip', 'cache', 'purge'], 
                             check=True, capture_output=True)
                cleaned.append('pip')
            
            if selection in ['pnpm', 'all'] and self._command_exists('pnpm'):
                self.menu.show_info("üßπ Limpiando cache pnpm...")
                subprocess.run(['pnpm', 'store', 'prune'], 
                             check=True, capture_output=True)
                cleaned.append('pnpm')
            
            if cleaned:
                self.menu.show_success(f"‚úÖ Cache limpiado: {', '.join(cleaned)}")
            else:
                self.menu.show_warning("‚ö†Ô∏è No se encontraron herramientas para limpiar")
                
        except subprocess.CalledProcessError as e:
            self.menu.show_error(f"Error limpiando cache: {e}")
    
    def _extra_tools(self):
        """Herramientas adicionales de desarrollo."""
        self.menu.clear_screen()
        
        tools = [
            {'name': 'üåê Abrir en navegador (localhost)', 'value': 'browser'},
            {'name': 'üìã Copiar ruta actual', 'value': 'copy_path'},
            {'name': 'üîç Explorar directorio', 'value': 'explorer'},
            {'name': 'üìä Informaci√≥n del proyecto', 'value': 'project_info'},
            {'name': 'üîß Variables de entorno', 'value': 'env_vars'}
        ]
        
        selection = self.menu.show_menu(tools, "üîß Herramientas adicionales:")
        
        if not selection or selection == 'exit':
            return
        
        if selection == 'browser':
            ports = ['3000', '8000', '8080', '5000']
            for port in ports:
                url = f"http://localhost:{port}"
                self.menu.show_info(f"üåê Abriendo {url}")
                webbrowser.open(url)
        
        elif selection == 'copy_path':
            if os.name == 'nt':
                subprocess.run(['clip'], input=str(self.current_dir), text=True)
            else:
                subprocess.run(['xclip', '-selection', 'clipboard'], 
                             input=str(self.current_dir), text=True)
            self.menu.show_success("‚úÖ Ruta copiada al portapapeles")
        
        elif selection == 'explorer':
            if os.name == 'nt':
                subprocess.run(['explorer', str(self.current_dir)])
            else:
                subprocess.run(['xdg-open', str(self.current_dir)])
            self.menu.show_success("üìÅ Explorador abierto")
        
        elif selection == 'project_info':
            self._show_project_info()
        
        elif selection == 'env_vars':
            self._show_env_vars()
    
    def _show_project_info(self):
        """Muestra informaci√≥n del proyecto actual."""
        self.menu.clear_screen()
        
        info_table = Table(title="üìä Informaci√≥n del Proyecto", box=box.DOUBLE)
        info_table.add_column("Propiedad", style="cyan", no_wrap=True)
        info_table.add_column("Valor", style="white")
        
        # Informaci√≥n b√°sica
        info_table.add_row("üìÅ Directorio", str(self.current_dir))
        info_table.add_row("üè∑Ô∏è Nombre", self.current_dir.name)
        
        # Detectar tipo de proyecto
        project_types = []
        if (self.current_dir / 'package.json').exists():
            project_types.append('Node.js')
        if (self.current_dir / 'requirements.txt').exists():
            project_types.append('Python')
        if (self.current_dir / 'composer.json').exists():
            project_types.append('PHP')
        if (self.current_dir / '.git').exists():
            project_types.append('Git')
        
        info_table.add_row("üîß Tipo", ', '.join(project_types) if project_types else 'Desconocido')
        
        # Tama√±o del directorio
        try:
            total_size = sum(f.stat().st_size for f in self.current_dir.rglob('*') if f.is_file())
            size_mb = total_size / (1024 * 1024)
            info_table.add_row("üíæ Tama√±o", f"{size_mb:.1f} MB")
        except Exception:
            info_table.add_row("üíæ Tama√±o", "No calculable")
        
        self.menu.console.print(info_table)
    
    def _show_env_vars(self):
        """Muestra variables de entorno relevantes para desarrollo."""
        self.menu.clear_screen()
        
        env_vars = [
            'PATH', 'PYTHONPATH', 'NODE_PATH', 'JAVA_HOME', 
            'ANDROID_HOME', 'FLUTTER_ROOT', 'GOPATH', 'CARGO_HOME'
        ]
        
        env_table = Table(title="üîß Variables de Entorno", box=box.SIMPLE)
        env_table.add_column("Variable", style="cyan", no_wrap=True)
        env_table.add_column("Valor", style="white")
        
        for var in env_vars:
            value = os.environ.get(var, 'No definida')
            if len(value) > 80:
                value = value[:77] + '...'
            env_table.add_row(var, value)
        
        self.menu.console.print(env_table)
    
    def _get_git_status_description(self, status: str) -> str:
        """Convierte el c√≥digo de estado de Git a descripci√≥n legible."""
        status_map = {
            '??': 'üÜï Nuevo',
            ' M': 'üìù Modificado',
            'M ': '‚úÖ Staged',
            ' D': 'üóëÔ∏è Eliminado',
            'D ': 'üóëÔ∏è Staged del',
            'A ': '‚ûï Agregado',
            'AM': 'üìù Mod+Staged',
            'MM': 'üìù Mod+Mod'
        }
        return status_map.get(status, status)
    
    def _command_exists(self, command: str) -> bool:
        """Verifica si un comando existe en el sistema."""
        try:
            subprocess.run([command, '--version'], 
                         capture_output=True, check=True, timeout=5)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError, subprocess.TimeoutExpired):
            # Para VS Code, intentar variaciones del comando
            if command == 'code':
                try:
                    subprocess.run(['code.cmd', '--version'], capture_output=True, check=True, timeout=5)
                    return True
                except:
                    return self._check_vscode_installation()
            elif command == 'wt':
                # Para Windows Terminal, verificar de manera diferente
                try:
                    subprocess.run(['wt', '--help'], capture_output=True, check=True, timeout=5)
                    return True
                except:
                    return False
            return False
    
    def _check_vscode_installation(self) -> bool:
        """Verifica si VS Code est√° instalado en ubicaciones comunes."""
        import os
        
        # Rutas comunes donde se instala VS Code
        common_paths = [
            rf"C:\Users\{os.environ.get('USERNAME', '')}\AppData\Local\Programs\Microsoft VS Code\bin\code.cmd",
            rf"C:\Users\{os.environ.get('USERNAME', '')}\AppData\Local\Programs\Microsoft VS Code\Code.exe",
            r"C:\Program Files\Microsoft VS Code\bin\code.cmd",
            r"C:\Program Files\Microsoft VS Code\Code.exe",
            r"C:\Program Files (x86)\Microsoft VS Code\bin\code.cmd",
            r"C:\Program Files (x86)\Microsoft VS Code\Code.exe"
        ]
        
        for path in common_paths:
            try:
                if os.path.exists(path):
                    return True
                subprocess.run([path, '--version'], capture_output=True, check=True, timeout=5)
                return True
            except:
                continue
        
        return False
    
    def _install_windows_terminal(self):
        """Ayuda al usuario a instalar Windows Terminal."""
        self.menu.clear_screen()
        
        self.menu.show_info("üí° Windows Terminal - Mejor experiencia de terminal")
        self.menu.console.print()
        
        # Mostrar beneficios
        benefits_text = """üé® Beneficios de Windows Terminal:
‚Ä¢ Pesta√±as m√∫ltiples en una sola ventana
‚Ä¢ Iconos y colores personalizables  
‚Ä¢ Mejor rendimiento y compatibilidad
‚Ä¢ Soporte completo para UTF-8
‚Ä¢ Temas y personalizaci√≥n avanzada"""
        
        benefits_panel = Panel(benefits_text, title="‚ú® ¬øPor qu√© Windows Terminal?", border_style="cyan")
        self.menu.console.print(benefits_panel)
        self.menu.console.print()
        
        # Opciones de instalaci√≥n
        install_options = [
            {'name': 'üè™ Microsoft Store (recomendado)', 'value': 'store'},
            {'name': 'üì¶ winget (l√≠nea de comandos)', 'value': 'winget'},
            {'name': 'üåê Descargar manualmente', 'value': 'manual'},
            {'name': '‚ùå Cancelar', 'value': 'cancel'}
        ]
        
        selection = self.menu.show_menu(install_options, "üì• ¬øC√≥mo quieres instalar Windows Terminal?")
        
        if selection == 'store':
            self.menu.show_info("üè™ Abriendo Microsoft Store...")
            try:
                subprocess.run(['start', 'ms-windows-store://pdp/?ProductId=9N0DX20HK701'], shell=True)
                self.menu.show_success("‚úÖ Microsoft Store abierto")
                self.menu.show_info("üí° Busca 'Windows Terminal' e inst√°lalo")
            except Exception as e:
                self.menu.show_error(f"Error abriendo Store: {e}")
        
        elif selection == 'winget':
            if self._command_exists('winget'):
                self.menu.show_info("üì¶ Instalando Windows Terminal con winget...")
                try:
                    result = subprocess.run(['winget', 'install', '--id=Microsoft.WindowsTerminal', '-e'], 
                                          capture_output=True, text=True)
                    if result.returncode == 0:
                        self.menu.show_success("‚úÖ Windows Terminal instalado correctamente")
                        self.menu.show_info("üîÑ Reinicia NooxCLI para usar Windows Terminal")
                    else:
                        self.menu.show_error("‚ùå Error instalando con winget")
                        self.menu.show_info("üí° Prueba con Microsoft Store")
                except Exception as e:
                    self.menu.show_error(f"Error ejecutando winget: {e}")
            else:
                self.menu.show_error("‚ùå winget no est√° disponible")
                self.menu.show_info("üí° Usa Microsoft Store en su lugar")
        
        elif selection == 'manual':
            self.menu.show_info("üåê Abriendo p√°gina de descarga...")
            try:
                webbrowser.open('https://github.com/microsoft/terminal/releases')
                self.menu.show_success("‚úÖ P√°gina de descarga abierta")
                self.menu.show_info("üí° Descarga la √∫ltima versi√≥n (.msixbundle)")
            except Exception as e:
                self.menu.show_error(f"Error abriendo navegador: {e}")
        
        elif selection == 'cancel':
            self.menu.show_info("‚ÑπÔ∏è Instalaci√≥n cancelada")
        
        self.menu.console.print()
        self.menu.show_info("üí° Despu√©s de instalar, reinicia NooxCLI para mejor experiencia")


def main():
    """Funci√≥n principal del m√≥dulo."""
    desarrollo_module = DesarrolloModule()
    desarrollo_module.main()


if __name__ == "__main__":
    main()
